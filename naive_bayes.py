# -*- coding: utf-8 -*-
"""Naive_bayes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1chD4Tn2N7cx5rhBfyy51bP_ciHSERbpk
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix

df= pd.read_csv("Iris.csv")

df

x=df.drop('Species',axis=1).values
x

y=df['Species'].values
y

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.2,random_state=82)

scaler= StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

nb = GaussianNB()
nb.fit(x_train,y_train)
y_pred= nb.predict(x_test)

cm = confusion_matrix(y_test,y_pred)
print(cm)

a = cm.shape
corrpred=0
falsepred=0

for row in range(a[0]):
  for c in range(a[1]):
    if row==c:
      corrpred += cm[row,c]
    else:
      falsepred += cm[row,c]
print("Correct Prediction :", corrpred)
print("False Prediction :", falsepred)
print("Accuracy : ", corrpred/cm.sum())

